//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""GameplayActions"",
            ""id"": ""3271bd55-2cc2-4dd6-9ea5-8f6c17507d0a"",
            ""actions"": [
                {
                    ""name"": ""FirstTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""1b2b89a4-4324-4ba3-82d7-09527ce01b06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""46132964-dc2f-479a-97c9-6fa649f03dc2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""082fba62-39cf-4681-8d82-6b64f7ef7d9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""ca054d90-63ba-48d3-b1d7-2083e052e828"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""fb2e8deb-5ccb-4dac-a15a-e5ca77f8181b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d51c200d-17de-4481-a776-7ad20aefd90d"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4937af80-98d2-4571-8724-9975124dca48"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af61c1d5-c98d-40ef-a1fe-8f9ce64a27a6"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb5e608-8d93-45fb-8a14-e77c61425842"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fee319b-0cb1-4271-879c-b4dfe443cfad"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayActions
        m_GameplayActions = asset.FindActionMap("GameplayActions", throwIfNotFound: true);
        m_GameplayActions_FirstTouchContact = m_GameplayActions.FindAction("FirstTouchContact", throwIfNotFound: true);
        m_GameplayActions_FirstTouchPosition = m_GameplayActions.FindAction("FirstTouchPosition", throwIfNotFound: true);
        m_GameplayActions_Swipe = m_GameplayActions.FindAction("Swipe", throwIfNotFound: true);
        m_GameplayActions_SecondTouchContact = m_GameplayActions.FindAction("SecondTouchContact", throwIfNotFound: true);
        m_GameplayActions_SecondTouchPosition = m_GameplayActions.FindAction("SecondTouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayActions
    private readonly InputActionMap m_GameplayActions;
    private List<IGameplayActionsActions> m_GameplayActionsActionsCallbackInterfaces = new List<IGameplayActionsActions>();
    private readonly InputAction m_GameplayActions_FirstTouchContact;
    private readonly InputAction m_GameplayActions_FirstTouchPosition;
    private readonly InputAction m_GameplayActions_Swipe;
    private readonly InputAction m_GameplayActions_SecondTouchContact;
    private readonly InputAction m_GameplayActions_SecondTouchPosition;
    public struct GameplayActionsActions
    {
        private @InputMap m_Wrapper;
        public GameplayActionsActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstTouchContact => m_Wrapper.m_GameplayActions_FirstTouchContact;
        public InputAction @FirstTouchPosition => m_Wrapper.m_GameplayActions_FirstTouchPosition;
        public InputAction @Swipe => m_Wrapper.m_GameplayActions_Swipe;
        public InputAction @SecondTouchContact => m_Wrapper.m_GameplayActions_SecondTouchContact;
        public InputAction @SecondTouchPosition => m_Wrapper.m_GameplayActions_SecondTouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_GameplayActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActionsActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsActionsCallbackInterfaces.Add(instance);
            @FirstTouchContact.started += instance.OnFirstTouchContact;
            @FirstTouchContact.performed += instance.OnFirstTouchContact;
            @FirstTouchContact.canceled += instance.OnFirstTouchContact;
            @FirstTouchPosition.started += instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed += instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled += instance.OnFirstTouchPosition;
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
            @SecondTouchContact.started += instance.OnSecondTouchContact;
            @SecondTouchContact.performed += instance.OnSecondTouchContact;
            @SecondTouchContact.canceled += instance.OnSecondTouchContact;
            @SecondTouchPosition.started += instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed += instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled += instance.OnSecondTouchPosition;
        }

        private void UnregisterCallbacks(IGameplayActionsActions instance)
        {
            @FirstTouchContact.started -= instance.OnFirstTouchContact;
            @FirstTouchContact.performed -= instance.OnFirstTouchContact;
            @FirstTouchContact.canceled -= instance.OnFirstTouchContact;
            @FirstTouchPosition.started -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled -= instance.OnFirstTouchPosition;
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
            @SecondTouchContact.started -= instance.OnSecondTouchContact;
            @SecondTouchContact.performed -= instance.OnSecondTouchContact;
            @SecondTouchContact.canceled -= instance.OnSecondTouchContact;
            @SecondTouchPosition.started -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled -= instance.OnSecondTouchPosition;
        }

        public void RemoveCallbacks(IGameplayActionsActions instance)
        {
            if (m_Wrapper.m_GameplayActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActionsActions @GameplayActions => new GameplayActionsActions(this);
    public interface IGameplayActionsActions
    {
        void OnFirstTouchContact(InputAction.CallbackContext context);
        void OnFirstTouchPosition(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
        void OnSecondTouchContact(InputAction.CallbackContext context);
        void OnSecondTouchPosition(InputAction.CallbackContext context);
    }
}
